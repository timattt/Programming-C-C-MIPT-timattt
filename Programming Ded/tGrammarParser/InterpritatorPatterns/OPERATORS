#define TOTAL_CHILDREN cur->size
#define CHILD_NAME(A) cur->children[A]->name
#define CHILD(A) cur->children[A]

// NAME, CODE

OPERATOR(=, {
	tLangType * prev_tp = currentType;
	tLangVariable * prev_var = currentVar;
	currentVar = vars[run(CHILD(0))];
	currentType = currentVar->type;
	
	tString val = run(CHILD(1));
	
	currentVar->value = val;
	
	currentVar = prev_var;
	currentType = prev_tp;
})
OPERATOR(if, {
	tLangType * prev = currentType;
	currentType = tINT;
	tString val = tINT->fromBytes(run(CHILD(0)));
	currentType = prev;
	if (val == "1") {
		run(CHILD(1));
	}
})
OPERATOR(NUM_VALUE, {
	res = currentType->toBytes(run(CHILD(0)));
})
OPERATOR(VAR_VALUE, {
	res = vars[run(CHILD(0))]->value;
})
OPERATOR(return, {
	tLangType * prev = currentType;
	currentType = currentMethod->return_type;
	return_value = res = run(CHILD(0));
	currentType = prev;
})
OPERATOR(useFunc, {
	tString name = run(CHILD(0));
	tLangType * prev_t = currentType;
	
	if (funcs.count(name) == 0) {
		tThrowException("NO SUCH METHOD!");
	}

	tLangMethod * met = funcs[name];
	tString * args = new tString[met->argsQuant];
	for (unsigned i = 0; i < met->argsQuant; i++) {
		currentType = met->args[i]->type;
		args[i] = run(CHILD(i + 1));
	}
	
	tLangMethod * prev_m = currentMethod;
	currentMethod = met;

	if (met->func != NULL) {
		res = met->func(args);
	} else {
		newVarBranch();
		for (unsigned i = 0; i < met->argsQuant; i++) {
			vars[met->args[i]->name] = met->args[i];
			vars[met->args[i]->name]->value = args[i];
		}
		run(met->start);
		res = return_value;
		flushBranch();
	}
	
	currentType = prev_t;
	currentMethod = prev_m;
	
	return_value = {};
	
	delete args;
})
OPERATOR({}, {
	for (unsigned i = 0; i < TOTAL_CHILDREN && (return_value == ""); i++) {
		run(CHILD(i));
	}
})
OPERATOR(var, {
	tString var_type = run(CHILD(0));
	tString var_name = run(CHILD(1));
	tLangVariable * vr = new tLangVariable(types[var_type], var_name);
	vars[var_name] = vr;
	res = var_name;
})
OPERATOR(*, {

	tString v1 = run(CHILD(0));

	for (unsigned i = 1; i < TOTAL_CHILDREN; i++) {
		tString v2 = run(CHILD(i));
		v1 = currentType->mul(v1, v2);	
	}
	res = v1;
})
OPERATOR(+, {
	tString v1 = run(CHILD(0));
	for (unsigned i = 1; i < TOTAL_CHILDREN; i++) {
		tString v2 = run(CHILD(i));
		v1 = currentType->add(v1, v2);	
	}
	res = v1;
})
OPERATOR(/, {
	tString v1 = run(CHILD(0));
	for (unsigned i = 1; i < TOTAL_CHILDREN; i++) {
		tString v2 = run(CHILD(i));
		v1 = currentType->div(v1, v2);	
	}
	res = v1;
})
OPERATOR(code, {
	tLangMethod * main = NULL;

	for (unsigned i = 0; i < TOTAL_CHILDREN; i++) {
		tLangNode * f = CHILD(i);
		
		tString type_name = run(f->children[0]);
		tLangType * tp = (type_name == tString("void") ? NULL : types[type_name]);
		
		tString nm = run(f->children[1]);

		tLangNode * code = f->children[f->size - 1];
		
		funcs[nm] = new tLangMethod(code, f->size - 3, nm, tp);

		for (unsigned j = 2; j < f->size - 1; j++) {
			funcs[nm]->args[j - 2] = vars[run(f->children[j])];
			vars.erase(funcs[nm]->args[j - 2]);
		}
		
		if (nm == "main") {
			main = funcs[nm];
		}
	}
	
	newVarBranch();
	run(main->start);
	flushBranch();
})
OPERATOR(-, {
	tString v1 = currentType->neg(run(CHILD(0)));
	for (unsigned i = 1; i < TOTAL_CHILDREN; i++) {
		tString v2 = run(CHILD(i));
		v1 = currentType->add(v1, currentType->neg(v2));	
	}
	res = v1;
})
OPERATOR(while, {
	while ((tINT->fromBytes(run(CHILD(0))).tToInt()) == 1) {
		run(CHILD(1));
	}
})

#undef CHILD
#undef CHILD_NAME
#undef TOTAL_CHILDREN